1) Explain the difference between primitive and reference data types with examples.

PRIMITIVE DATA TYPE:
Primitive types in Java store actual values directly in memory. They are like book IDs—simple numbers used to find books but not containing any extra information.
Characteristics of Primitive Data Types:
 Stores actual values directly (not references).
 Fast & memory-efficient (because they don’t store extra metadata).
 Fixed size in memory (depending on the type).
 Cannot have additional behaviours (methods/functions).

REFERENCE DATA TYPE:
Reference types, on the other hand, store memory addresses of objects instead of actual values. They are like books—you don’t memorize the full content, you just remember where they are in the library.
Characteristics of Reference Data Types:
Stores the memory address (reference) of the actual object.
 More flexible (can contain multiple properties & methods).
 Can have dynamic memory allocation (size can change at runtime).
 Used for objects, arrays, and custom classes.


 

2) Polymorphism in java.
Polymorphism means "many forms". In Java, it allows methods or objects to behave differently based on the context.
It helps in code reusability and flexibility.
Types of Polymorphism
1.	Method Overloading (Compile-time Polymorphism) 
o	Same method name but different parameters within the same class.
2.	Method Overriding (Runtime Polymorphism) 
o	Same method name & parameters, but different behavior in child class.

3) Encapsulation in java

Encapsulation is one of the fundamental concepts in object-oriented programming (OOP). 
Encapsulation describes bundling data and methods that work on that data within one unit, like a class. We often use this concept to hide an object’s internal representation or state from the outside. This is called information hiding.
The general idea of this mechanism is simple. For example, you have an attribute that is not visible from the outside of an object. You bundle it with methods that provide read or write access. Encapsulation allows you to hide specific information and control access to the object’s internal state.

4) Interfaces and Abstract class

Interface:
•	An interface is a blueprint that only contains abstract methods (before Java 8).
•	It defines what a class should do, but not how.
•	A class must implement an interface to use it.

Abstract Class
•	An abstract class can have both abstract and concrete methods.
•	Unlike interfaces, it can have instance variables and constructors.

 


5) Multithreading.
Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU. Each part of such program is called a thread. So, threads are light-weight processes within a process.
Threads can be created by using two mechanisms: 
1.	Extending the Thread class 
2.	Implementing the Runnable Interface
Thread creation by extending the Thread class
We create a class that extends the java.lang.Thread class. This class overrides the run() method available in the Thread class. A thread begins its life inside run() method. We create an object of our new class and call start() method to start the execution of a thread. Start() invokes the run() method on the Thread object.
Thread creation by implementing the Runnable Interface
We create a new class which implements java.lang.Runnable interface and override run() method. Then we instantiate a Thread object and call start() method on this object. 




